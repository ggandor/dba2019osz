Házi feladat no. 3/A: Kő-papír-olló-gyík-Spock, elegáns megoldás

Hozzávalók: 1db szótár, "in", "not in", plusz a többi jól ismert
dolog. Természetesen lehessen kilépni, és ellenőrizzük, hogy értelmes
lépést gépelt-e be a játékos. Nagyságrendileg max. nettó 25 sor.

A szép mindebben az lesz, hogy a kódunk magja innentől bármilyen verzión
működni fog, változtatás nélkül. Ha kitalálnánk egy változatot mondjuk
10 lehetséges lépéssel (ez már 100 kombinációt jelent), akkor is csak
annyi lenne a dolgunk, hogy a szótárba felvegyük a megfelelő elemeket,
és a teljes program még akkor is elférne egy képernyőn.


Házi feladat no. 3/B: Táblák összefésülése

Megjegyzés: ebben a feladatban lényegében az ún. relációs adatbázisok
"összekapcsolás" műveletéhez hasonló dolgot csinálunk (persze naiv,
kevéssé hatékony módon).

Adott két fájlunk, különböző információkkal. Az egyik filmes idézeteket
párosít karakterek nevéhez, a másik karaktereket filmcímekhez.

A feladat: hozzunk létre egy olyan fájt, amelyben az idézetek mellett
a vonatkozó filmcímet találjuk.

Olvassuk be a fájlokat, és csináljunk belőlük pl. szótárakat tartalmazó
listákat, vagy 1-1 nagy szótárat - a lényeg, hogy valahogy össze tudjuk
hasonlítani a "karakter" attribútum mentén a kettőt.

Ezután ciklus(ok)kal fésüljük össze a közös kulcs mentén őket egy új
listába/szótárba, amely csak a karakterneveket és a filmcímeket
tartalmazza, végül pedig írjuk vissza egy az előzőekkel azonos formátumú
fájlba az eredményt.

Ha van működő verzió, vegyétek észre, hogy valószínűleg többször is
nagyon hasonló kódrészleteket írtatok le. Próbáljátok meg kiszervezni
az ismétlődő részeket függvényekbe, a változó elemeket pedig
a függvények paramétereként fogalmazzátok meg, így elég a logikát
egyszer megírni, majd a függvényt különböző argumentumokkal hívni.
(Pl. 'read_file', 'content_to_dictionary', és hasonló függvénynevek
gyanúsak...) Bónuszként még a többi részre is adhattok általános
megoldást ('merge_dictionaries', 'write_dictionary_to_file' és
hasonlók...).

P.S.: Utána lehet olvasni a csv fájloknak, és hogy milyen beépített
eszközei vannak a Pythonnak a kezelésükre, de egyelőre nem szükséges
- lehet velük egyszerűsíteni az életet, de nem ekörül forog a feladat.
